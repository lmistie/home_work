/****************************************************************************
** Meta object code from reading C++ file 'tst_qamqpqueue.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_qamqpqueue.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_QAMQPQueue_t {
    QByteArrayData data[36];
    char stringdata0[541];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_QAMQPQueue_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_QAMQPQueue_t qt_meta_stringdata_tst_QAMQPQueue = {
    {
QT_MOC_LITERAL(0, 0, 14), // "tst_QAMQPQueue"
QT_MOC_LITERAL(1, 15, 4), // "init"
QT_MOC_LITERAL(2, 20, 0), // ""
QT_MOC_LITERAL(3, 21, 7), // "cleanup"
QT_MOC_LITERAL(4, 29, 15), // "defaultExchange"
QT_MOC_LITERAL(5, 45, 22), // "standardExchanges_data"
QT_MOC_LITERAL(6, 68, 17), // "standardExchanges"
QT_MOC_LITERAL(7, 86, 23), // "invalidDeclaration_data"
QT_MOC_LITERAL(8, 110, 18), // "invalidDeclaration"
QT_MOC_LITERAL(9, 129, 11), // "invalidBind"
QT_MOC_LITERAL(10, 141, 7), // "unnamed"
QT_MOC_LITERAL(11, 149, 15), // "exclusiveAccess"
QT_MOC_LITERAL(12, 165, 16), // "exclusiveRemoval"
QT_MOC_LITERAL(13, 182, 8), // "notFound"
QT_MOC_LITERAL(14, 191, 6), // "remove"
QT_MOC_LITERAL(15, 198, 14), // "removeIfUnused"
QT_MOC_LITERAL(16, 213, 13), // "removeIfEmpty"
QT_MOC_LITERAL(17, 227, 10), // "bindUnbind"
QT_MOC_LITERAL(18, 238, 11), // "delayedBind"
QT_MOC_LITERAL(19, 250, 5), // "purge"
QT_MOC_LITERAL(20, 256, 25), // "canOnlyStartConsumingOnce"
QT_MOC_LITERAL(21, 282, 25), // "ensureConsumeOnlySentOnce"
QT_MOC_LITERAL(22, 308, 6), // "cancel"
QT_MOC_LITERAL(23, 315, 32), // "invalidCancelBecauseNotConsuming"
QT_MOC_LITERAL(24, 348, 38), // "invalidCancelBecauseInvalidCo..."
QT_MOC_LITERAL(25, 387, 8), // "getEmpty"
QT_MOC_LITERAL(26, 396, 3), // "get"
QT_MOC_LITERAL(27, 400, 28), // "verifyContentEncodingIssue33"
QT_MOC_LITERAL(28, 429, 9), // "defineQos"
QT_MOC_LITERAL(29, 439, 10), // "invalidQos"
QT_MOC_LITERAL(30, 450, 3), // "qos"
QT_MOC_LITERAL(31, 454, 17), // "invalidRoutingKey"
QT_MOC_LITERAL(32, 472, 19), // "tableFieldDataTypes"
QT_MOC_LITERAL(33, 492, 17), // "messageProperties"
QT_MOC_LITERAL(34, 510, 12), // "emptyMessage"
QT_MOC_LITERAL(35, 523, 17) // "cleanupOnDeletion"

    },
    "tst_QAMQPQueue\0init\0\0cleanup\0"
    "defaultExchange\0standardExchanges_data\0"
    "standardExchanges\0invalidDeclaration_data\0"
    "invalidDeclaration\0invalidBind\0unnamed\0"
    "exclusiveAccess\0exclusiveRemoval\0"
    "notFound\0remove\0removeIfUnused\0"
    "removeIfEmpty\0bindUnbind\0delayedBind\0"
    "purge\0canOnlyStartConsumingOnce\0"
    "ensureConsumeOnlySentOnce\0cancel\0"
    "invalidCancelBecauseNotConsuming\0"
    "invalidCancelBecauseInvalidConsumerTag\0"
    "getEmpty\0get\0verifyContentEncodingIssue33\0"
    "defineQos\0invalidQos\0qos\0invalidRoutingKey\0"
    "tableFieldDataTypes\0messageProperties\0"
    "emptyMessage\0cleanupOnDeletion"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_QAMQPQueue[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      34,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  184,    2, 0x08 /* Private */,
       3,    0,  185,    2, 0x08 /* Private */,
       4,    0,  186,    2, 0x08 /* Private */,
       5,    0,  187,    2, 0x08 /* Private */,
       6,    0,  188,    2, 0x08 /* Private */,
       7,    0,  189,    2, 0x08 /* Private */,
       8,    0,  190,    2, 0x08 /* Private */,
       9,    0,  191,    2, 0x08 /* Private */,
      10,    0,  192,    2, 0x08 /* Private */,
      11,    0,  193,    2, 0x08 /* Private */,
      12,    0,  194,    2, 0x08 /* Private */,
      13,    0,  195,    2, 0x08 /* Private */,
      14,    0,  196,    2, 0x08 /* Private */,
      15,    0,  197,    2, 0x08 /* Private */,
      16,    0,  198,    2, 0x08 /* Private */,
      17,    0,  199,    2, 0x08 /* Private */,
      18,    0,  200,    2, 0x08 /* Private */,
      19,    0,  201,    2, 0x08 /* Private */,
      20,    0,  202,    2, 0x08 /* Private */,
      21,    0,  203,    2, 0x08 /* Private */,
      22,    0,  204,    2, 0x08 /* Private */,
      23,    0,  205,    2, 0x08 /* Private */,
      24,    0,  206,    2, 0x08 /* Private */,
      25,    0,  207,    2, 0x08 /* Private */,
      26,    0,  208,    2, 0x08 /* Private */,
      27,    0,  209,    2, 0x08 /* Private */,
      28,    0,  210,    2, 0x08 /* Private */,
      29,    0,  211,    2, 0x08 /* Private */,
      30,    0,  212,    2, 0x08 /* Private */,
      31,    0,  213,    2, 0x08 /* Private */,
      32,    0,  214,    2, 0x08 /* Private */,
      33,    0,  215,    2, 0x08 /* Private */,
      34,    0,  216,    2, 0x08 /* Private */,
      35,    0,  217,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_QAMQPQueue::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<tst_QAMQPQueue *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->cleanup(); break;
        case 2: _t->defaultExchange(); break;
        case 3: _t->standardExchanges_data(); break;
        case 4: _t->standardExchanges(); break;
        case 5: _t->invalidDeclaration_data(); break;
        case 6: _t->invalidDeclaration(); break;
        case 7: _t->invalidBind(); break;
        case 8: _t->unnamed(); break;
        case 9: _t->exclusiveAccess(); break;
        case 10: _t->exclusiveRemoval(); break;
        case 11: _t->notFound(); break;
        case 12: _t->remove(); break;
        case 13: _t->removeIfUnused(); break;
        case 14: _t->removeIfEmpty(); break;
        case 15: _t->bindUnbind(); break;
        case 16: _t->delayedBind(); break;
        case 17: _t->purge(); break;
        case 18: _t->canOnlyStartConsumingOnce(); break;
        case 19: _t->ensureConsumeOnlySentOnce(); break;
        case 20: _t->cancel(); break;
        case 21: _t->invalidCancelBecauseNotConsuming(); break;
        case 22: _t->invalidCancelBecauseInvalidConsumerTag(); break;
        case 23: _t->getEmpty(); break;
        case 24: _t->get(); break;
        case 25: _t->verifyContentEncodingIssue33(); break;
        case 26: _t->defineQos(); break;
        case 27: _t->invalidQos(); break;
        case 28: _t->qos(); break;
        case 29: _t->invalidRoutingKey(); break;
        case 30: _t->tableFieldDataTypes(); break;
        case 31: _t->messageProperties(); break;
        case 32: _t->emptyMessage(); break;
        case 33: _t->cleanupOnDeletion(); break;
        default: ;
        }
    }
    (void)_a;
}

QT_INIT_METAOBJECT const QMetaObject tst_QAMQPQueue::staticMetaObject = { {
    QMetaObject::SuperData::link<TestCase::staticMetaObject>(),
    qt_meta_stringdata_tst_QAMQPQueue.data,
    qt_meta_data_tst_QAMQPQueue,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *tst_QAMQPQueue::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_QAMQPQueue::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_QAMQPQueue.stringdata0))
        return static_cast<void*>(this);
    return TestCase::qt_metacast(_clname);
}

int tst_QAMQPQueue::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = TestCase::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 34)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 34;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 34)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 34;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
